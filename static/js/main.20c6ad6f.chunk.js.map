{"version":3,"sources":["components/tags.js","columns.js","App.js","reportWebVitals.js","index.js"],"names":["CameraTag","Chip","label","color","size","variant","style","display","this","props","visibility","React","LidarTag","border","RadarTag","RandomTag","name","useStyles","makeStyles","root","alignItems","lineHeight","width","height","position","whiteSpace","overflow","textOverflow","GridCellExpand","value","wrapper","cellDiv","cellValue","anchorEl","setAnchorEl","classes","showFullCell","setShowFullCell","showPopper","setShowPopper","document","addEventListener","handleKeyDown","removeEventListener","nativeEvent","key","ref","className","onMouseEnter","element","isCurrentlyOverflown","current","scrollHeight","clientHeight","scrollWidth","clientWidth","onMouseLeave","top","Popper","open","marginLeft","Paper","elevation","minHeight","offsetHeight","Typography","padding","renderCellExpand","params","toString","colDef","columns","field","headerName","renderCell","Link","href","getValue","id","target","align","type","valueFormatter","valueFormatted","Number","toLocaleString","sortable","hide","description","tagProps","sensors","split","includes","camera","filter","f","lidar","radar","length","other3","other2","other1","e","checkSensortypes","theme","note","right","window","innerHeight","fontSize","innerWidth","borderRadius","paddingLeft","paddingRight","textTransform","lastUpdate","left","backgroundColor","title","textAlign","float","paddingTop","subTitle","customDatagrid","headBand","RenderExpandCellGrid","setDimensions","handleResize","_","pageSize","setPageSize","visContribute","visGit","useMediaQuery","json2mq","minWidth","screen","Button","process","rows","Data","components","Toolbar","GridToolbar","disableColumnMenu","sortingOrder","onPageSizeChange","newPageSize","rowsPerPageOptions","pagination","columnBuffer","Window","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.20c6ad6f.chunk.js","sourcesContent":["import Chip from \"@material-ui/core/Chip\";\nimport * as React from \"react\";\n\nexport class CameraTag extends React.Component {\n    render() {\n        return <Chip label=\"camera\"\n                     color=\"primary\"\n                     size=\"small\"\n                     variant=\"outlined\"\n                     style={{display:this.props.visibility}}/>\n    }\n}\n\nexport class LidarTag extends React.Component {\n    render() {\n        return <Chip label=\"lidar\"\n                     size=\"small\"\n                     variant=\"outlined\"\n                     style={{color: 'mediumseagreen', border: '1px solid mediumseagreen', display: this.props.visibility}}/>\n    }\n}\n\nexport class RadarTag extends React.Component {\n    render() {\n        return <Chip label=\"radar\"\n                     size=\"small\"\n                     variant={\"outlined\"}\n                     style={{color: 'maroon', border: '1px solid maroon', display:this.props.visibility}}/>\n    }\n}\n\nexport class RandomTag extends React.Component {\n    render() {\n        return <Chip label={this.props.name}\n                     size={\"small\"}\n                     variant={\"outlined\"}\n                     style={{color: 'peru', border: '1px solid peru', display: this.props.visibility}}/>\n    }\n}","import * as React from 'react';\nimport Link from \"@material-ui/core/Link\";\nimport Typography from \"@material-ui/core/Typography\"\nimport PropTypes from 'prop-types';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport { makeStyles } from '@material-ui/styles';\nimport ReceiptIcon from '@material-ui/icons/Receipt';\nimport {CameraTag, LidarTag, RadarTag, RandomTag} from \"./components/tags\";\n\nfunction isOverflown(element) {\n    return element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth;\n}\n\n\n\n/***\n *\n *\n * @param description: contains the input of the field 'sensors' of the data sets\n * @param tagProps: properties of 6 tags for sensor types: 'camera', 'radar', 'lidar', 'other1', 'other2', 'other3'\n * @returns {string[]} returns array that contains all sensors that are NOT camera, lidar or radar\n *\n *\n * Function takes info on sensors in the respective data set; checks whether camera, lidar or radar are included;\n * returns info on up to 3 additional sensors\n */\nfunction checkSensortypes(description, tagProps){\n    try {\n        let sensors = description.split(\", \");\n        if (sensors.includes(\"camera\")) {\n            tagProps.camera='visible';\n            sensors = sensors.filter(function(f) { return f !== 'camera' });\n        }\n        if (sensors.includes(\"lidar\")) {\n            tagProps.lidar='visible';\n            sensors = sensors.filter(function(f) { return f !== 'lidar' });\n        }\n        if (sensors.includes(\"radar\")) {\n            tagProps.radar='visible';\n            sensors = sensors.filter(function(f) { return f !== 'radar' });\n        }\n        if (sensors.length===3) {\n            tagProps.other3='visible';\n            tagProps.other2 = 'visible';\n            tagProps.other1 = 'visible';\n        } else if (sensors.length===2) {\n            tagProps.other2 = 'visible';\n            tagProps.other1 = 'visible';\n        } else if ((sensors.length===1) && (sensors[0]!==\"\")) {\n            tagProps.other1 = 'visible';\n        }\n        return (sensors)\n    }\n    catch (e) {\n    }\n}\n\n\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        alignItems: 'center',\n        lineHeight: '24px',\n        width: '100%',\n        height: '100%',\n        position: 'relative',\n        display: 'flex',\n        '& .cellValue': {\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n        },\n    },\n}));\n\nconst GridCellExpand = React.memo(function GridCellExpand(props) {\n    const { width, value } = props;\n    const wrapper = React.useRef(null);\n    const cellDiv = React.useRef(null);\n    const cellValue = React.useRef(null);\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const classes = useStyles();\n    const [showFullCell, setShowFullCell] = React.useState(false);\n    const [showPopper, setShowPopper] = React.useState(false);\n\n    const handleMouseEnter = () => {\n        const isCurrentlyOverflown = isOverflown(cellValue.current);\n        setShowPopper(isCurrentlyOverflown);\n        setAnchorEl(cellDiv.current);\n        setShowFullCell(true);\n    };\n\n    const handleMouseLeave = () => {\n        setShowFullCell(false);\n    };\n\n    React.useEffect(() => {\n        if (!showFullCell) {\n            return undefined;\n        }\n\n        function handleKeyDown(nativeEvent) {\n            // IE11, Edge (prior to using Bink?) use 'Esc'\n            if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {\n                setShowFullCell(false);\n            }\n        }\n\n        document.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [setShowFullCell, showFullCell]);\n\n    return (\n        <div\n            ref={wrapper}\n            className={classes.root}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n        >\n            <div\n                ref={cellDiv}\n                style={{\n                    height: 1,\n                    width,\n                    display: 'block',\n                    position: 'absolute',\n                    top: 0,\n                }}\n            />\n            <div ref={cellValue} className=\"cellValue\">\n                {value}\n            </div>\n            {showPopper && (\n                <Popper\n                    open={showFullCell && anchorEl !== null}\n                    anchorEl={anchorEl}\n                    style={{ width, marginLeft: -17 }}\n                >\n                    <Paper\n                        elevation={1}\n                        style={{ minHeight: wrapper.current.offsetHeight - 3 }}\n                    >\n                        <Typography variant=\"body2\" style={{ padding: 8 }}>\n                            {value}\n                        </Typography>\n                    </Paper>\n                </Popper>\n            )}\n        </div>\n    );\n});\n\nGridCellExpand.propTypes = {\n    value: PropTypes.string.isRequired,\n    width: PropTypes.number.isRequired,\n};\n\nfunction renderCellExpand(params) {\n    return (\n        <GridCellExpand\n            value={params.value ? params.value.toString() : ''}\n            width={params.colDef.width}\n        />\n    );\n}\n\nrenderCellExpand.propTypes = {\n    /**\n     * The column of the row that the current cell belongs to.\n     */\n    colDef: PropTypes.any.isRequired,\n    /**\n     * The cell value, but if the column has valueGetter, use getValue.\n     */\n    value: PropTypes.oneOfType([\n        PropTypes.instanceOf(Date),\n        PropTypes.number,\n        PropTypes.object,\n        PropTypes.string,\n        PropTypes.bool,\n    ]),\n};\n\nconst columns = [\n    {\n        field: 'id',\n        headerName: 'Name',\n        width: 240,\n        renderCell: (params) => (\n            <strong>\n                <Link\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    style={{ marginLeft: 16 }}\n                    href={params.getValue(params.id, 'href') || ''}\n                    target={'_blank'}\n                >\n                    {params.getValue(params.id, 'id') || ''}\n                </Link>\n            </strong>\n        ),\n    },\n    {\n        field: 'size_hours',\n        headerName: 'Size [h]',\n        width: 105,\n        align: 'right',\n        type: \"number\",\n        valueFormatter: (params) => {\n            const valueFormatted = Number(params.value).toLocaleString();\n            if (valueFormatted!==\"0\" && valueFormatted!==\"NaN\")\n                return `${valueFormatted}`;\n            else\n                return \"\";\n        },\n    },\n    {\n        field: 'size_storage',\n        headerName: 'Size [GB]',\n        width: 120,\n        align: 'right',\n        type: \"number\",\n        valueFormatter: (params) => {\n            const valueFormatted = Number(params.value).toLocaleString();\n            if (valueFormatted!==\"0\" && valueFormatted!==\"NaN\")\n                return `${valueFormatted}`;\n            else\n                return \"\";\n        },\n    },\n    {\n        field: 'frames',\n        headerName: 'Frames',\n        width: 110,\n        align: 'right',\n        type: \"number\",\n        valueFormatter: (params) => {\n            const valueFormatted = Number(params.value).toLocaleString();\n            if (valueFormatted!==\"0\" && valueFormatted!==\"NaN\")\n                return `${valueFormatted}`;\n            else\n                return \"\";\n        },\n    },\n    {\n        field: 'numberOfScenes',\n        headerName: 'N° Scenes',\n        width: 130,\n        align: 'right',\n        type: \"number\",\n        sortable: true,\n        valueFormatter: (params) => {\n            const valueFormatted = Number(params.value).toLocaleString();\n            if (valueFormatted!==\"0\" && valueFormatted!==\"NaN\")\n                return `${valueFormatted}`;\n            else\n                return \"\";\n        },\n    },\n    {\n        field: 'samplingRate',\n        headerName: 'Sampling Rate [Hz]',\n        width: 180,\n        hide: true,\n        type: \"number\",\n    },\n    {\n        field: 'lengthOfScenes',\n        headerName: 'Scene Length [s]',\n        width: 165,\n        align: 'right',\n        type: \"number\",\n        valueFormatter: (params) => {\n            const valueFormatted = Number(params.value).toLocaleString();\n            if (valueFormatted!==\"0\" && valueFormatted!==\"NaN\")\n                return `${valueFormatted}`;\n            else\n                return \"\";\n        },\n    },\n    {\n        field: 'sensors',\n        headerName: 'Sensortypes',\n        description: 'types of sensors used in the dataset',\n        type: 'string',\n        width: 310,\n        sortable: false,\n        renderCell: (params) => {\n            const valueFormatted = params.value;\n            const tagProps = {\n                'camera': 'none',\n                'lidar': 'none',\n                'radar': 'none',\n                'other1': 'none',\n                'other2': 'none',\n                'other3': 'none'\n            };\n            const sensors = checkSensortypes(valueFormatted, tagProps);\n\n            if (sensors)\n                return (\n                    <div>\n                        <CameraTag visibility={tagProps.camera}/>\n                        <LidarTag visibility={tagProps.lidar}/>\n                        <RadarTag visibility={tagProps.radar}/>\n                        <RandomTag visibility={tagProps.other1} name={sensors[0]}/>\n                        <RandomTag visibility={tagProps.other2} name={sensors[1]}/>\n                        <RandomTag visibility={tagProps.other3} name={sensors[2]}/>\n                    </div>\n                );\n        },\n    },\n    {\n        field: \"sensorDetail\",\n        headerName: \"Sensors - Details\",\n        description: 'details on used sensors',\n        type: \"string\",\n        width: 400,\n        sortable: false,\n        hide: true,\n        renderCell: renderCellExpand\n    },\n    {\n        field: 'benchmark',\n        headerName: 'Benchmark',\n        description: 'This column has a value getter and is not sortable.',\n        sortable: false,\n        width: 360,\n        hide: true,\n        renderCell: renderCellExpand\n    },\n    {\n        field: 'annotations',\n        headerName: 'Annotations',\n        width: 350,\n        type: \"String\",\n        sortable: false,\n        hide: true,\n        renderCell: renderCellExpand\n    },\n    {\n        field: 'location',\n        headerName: 'Location',\n        width: 380,\n        hide: true,\n        type: \"string\",\n        sortable: false,\n        renderCell: renderCellExpand\n    },\n    {\n        field: 'rawData',\n        headerName: 'Provide raw data',\n        width: 150,\n        hide: true,\n        type: \"string\",\n        sortable: false,\n        renderCell: renderCellExpand\n    },\n    {\n        field: 'licensing',\n        headerName: 'Licensing',\n        width: 350,\n        sortable: false,\n        type: \"string\",\n        renderCell: renderCellExpand\n    },\n    {\n        field: 'relatedDatasets',\n        headerName: 'Related Datasets',\n        width: 180,\n        hide: true,\n        type: \"string\",\n        sortable: false,\n        renderCell: renderCellExpand\n    },\n    {\n        field: 'publishDate',\n        headerName: 'Publish Date',\n        width: 150,\n        hide: true,\n        type: \"date\",\n        renderCell: renderCellExpand\n    },\n    {\n        field: 'lastUpdate',\n        headerName: 'Last Update',\n        width: 150,\n        hide: true,\n        type: \"date\",\n        renderCell: renderCellExpand\n    },\n    {\n        field: 'relatedPaper',\n        headerName: 'Related Paper',\n        width: 150,\n        hide: false,\n        type: \"string\",\n        renderCell: (params) => (\n                <Link\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    style={{ marginLeft: 16 }}\n                    href={params.getValue(params.id, 'relatedPaper')}\n                    target={'_blank'}\n                >\n                    <ReceiptIcon/>\n                </Link>\n        ),\n    },\n];\n\nexport { columns };\n\n","import * as React from 'react';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport {columns} from './columns.js';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button } from '@material-ui/core';\nimport json2mq from 'json2mq';\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Data from './data_sorted.json';\n\nconst useStyles = makeStyles((theme) => ({\n    note: {\n        position: \"absolute\",\n        right: \"0.5%\",\n        top: window.innerHeight*0.01,\n        fontSize: 0.007*window.innerWidth,\n        border: \"1px solid white\",\n        borderRadius: \"5px\",\n        paddingLeft: \"0.25%\",\n        paddingRight: \"0.25%\",\n        color: \"white\",\n        textTransform: \"none\"\n    },\n    lastUpdate: {\n        position: \"absolute\",\n        left: \"0.5%\",\n        top: window.innerHeight*0.01,\n        fontSize: 0.007*window.innerWidth,\n        border: \"1px solid white\",\n        borderRadius: \"5px\",\n        padding: \"0.5%\",\n        color: \"#3f51b5\",\n        textTransform: \"none\",\n        backgroundColor: \"white\",\n    },\n    title: {\n        display: 'block',\n        textAlign: 'center',\n        float: 'center',\n//        fontSize: \"calc(15px + 1vw)\",\n        fontSize: 0.02*window.innerWidth,\n        paddingTop: \".2%\"\n    },\n    subTitle: {\n        textAlign: 'center',\n        float: \"center\",\n//        fontSize: \"0.8vw\",\n        fontSize: 0.01*window.innerWidth,\n        position: \"relative\"\n    },\n    customDatagrid: {\n        height: window.innerHeight*0.9,\n    },\n    headBand: {\n        width: window.innerWidth,\n        height: window.innerHeight*0.1,\n        backgroundColor: \"#3f51b5\",\n        color: \"white\",\n    },\n}));\n\n\nexport default function RenderExpandCellGrid() {\n\n    const [, setDimensions] = React.useState({\n        height: window.innerHeight,\n        width: window.innerWidth\n    });\n    React.useEffect(() => {\n        function handleResize() {\n            setDimensions({\n                height: window.innerHeight,\n                width: window.innerWidth\n            })\n        }\n        window.addEventListener('resize', handleResize);\n        return _ => {\n            window.removeEventListener('resize', handleResize)\n        }\n    });\n\n    const classes = useStyles();\n    const [pageSize, setPageSize] = React.useState(10);\n    const matches = useMediaQuery(\n        json2mq({\n            minWidth: 0.535*window.screen.width\n        }),\n    );\n    let visContribute = 'visible';\n    let visGit = 'hidden';\n    if (matches === false) {\n        visContribute  = 'hidden';\n        visGit = 'visible';\n    }\n\n\n    return (\n        <div style={{width: '100%', height: window.innerHeight}}>\n            <div className={classes.headBand} style={{width: window.innerWidth}}>\n                <Typography className={classes.title}>\n                    ad-datasets\n                </Typography>\n                <Typography className={classes.subTitle} >\n                Complete* and curated list of autonomous driving related datasets\n                </Typography>\n            </div>\n            <Button className={classes.note} target={'_blank'} style={{visibility: visContribute}}\n                    href={\"https://github.com/daniel-bogdoll/ad-datasets\"}>\n                *Could not find your dataset? <br/> Simply create a pull request ;)\n            </Button>\n            <Button className={classes.note} target={'_blank'} style={{visibility: visGit}}\n                    href={\"https://github.com/daniel-bogdoll/ad-datasets\"}>\n                *GitHub\n            </Button>\n            <Typography className={classes.lastUpdate}>\n                Last Update: {process.env.REACT_APP_GIT_SHA}\n            </Typography>\n            <DataGrid rows={Data} columns={columns} components={{Toolbar: GridToolbar}} disableColumnMenu={true}\n                      sortingOrder={['desc', 'asc']}\n                      pageSize={pageSize}\n                      onPageSizeChange={(newPageSize) => setPageSize(newPageSize)}\n                      rowsPerPageOptions={[10, 25, 50]}\n                      pagination\n                      columnBuffer={3}\n                      className={classes.customDatagrid}\n                      style={{width: Window.innerWidth}}/>\n        </div>\n    );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}